{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Alexco/Desktop/proiect .net/Project/Project/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { getEventSource, getWS } from \"./DynamicImports\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\nexport class HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      webSocketModule = getWS();\n      eventSourceModule = getEventSource();\n    }\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n    this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  start(transferFormat) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      transferFormat = transferFormat || TransferFormat.Binary;\n      Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n      _this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n      if (_this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\n        return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n      }\n      _this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\n      _this._startInternalPromise = _this._startInternal(transferFormat);\n      yield _this._startInternalPromise;\n      // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n      if (_this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"Failed to start the HttpConnection before stop() was called.\";\n        _this._logger.log(LogLevel.Error, message);\n        // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n        yield _this._stopPromise;\n        return Promise.reject(new AbortError(message));\n      } else if (_this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n        _this._logger.log(LogLevel.Error, message);\n        return Promise.reject(new AbortError(message));\n      }\n      _this._connectionStarted = true;\n    })();\n  }\n  send(data) {\n    if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    }\n    // Transport will not be null if state is connected\n    return this._sendQueue.send(data);\n  }\n  stop(error) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n        _this2._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n        return Promise.resolve();\n      }\n      if (_this2._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n        _this2._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n        return _this2._stopPromise;\n      }\n      _this2._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\n      _this2._stopPromise = new Promise(resolve => {\n        // Don't complete stop() until stopConnection() completes.\n        _this2._stopPromiseResolver = resolve;\n      });\n      // stopInternal should never throw so just observe it.\n      yield _this2._stopInternal(error);\n      yield _this2._stopPromise;\n    })();\n  }\n  _stopInternal(error) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // Set error as soon as possible otherwise there is a race between\n      // the transport closing and providing an error and the error from a close message\n      // We would prefer the close message error.\n      _this3._stopError = error;\n      try {\n        yield _this3._startInternalPromise;\n      } catch (e) {\n        // This exception is returned to the user as a rejected Promise from the start method.\n      }\n      // The transport's onclose will trigger stopConnection which will run our onclose event.\n      // The transport should always be set if currently connected. If it wasn't set, it's likely because\n      // stop was called during start() and start() failed.\n      if (_this3.transport) {\n        try {\n          yield _this3.transport.stop();\n        } catch (e) {\n          _this3._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n          _this3._stopConnection();\n        }\n        _this3.transport = undefined;\n      } else {\n        _this3._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n      }\n    })();\n  }\n  _startInternal(transferFormat) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Store the original base url and the access token factory since they may change\n      // as part of negotiating\n      let url = _this4.baseUrl;\n      _this4._accessTokenFactory = _this4._options.accessTokenFactory;\n      _this4._httpClient._accessTokenFactory = _this4._accessTokenFactory;\n      try {\n        if (_this4._options.skipNegotiation) {\n          if (_this4._options.transport === HttpTransportType.WebSockets) {\n            // No need to add a connection ID in this case\n            _this4.transport = _this4._constructTransport(HttpTransportType.WebSockets);\n            // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n            yield _this4._startTransport(url, transferFormat);\n          } else {\n            throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n          }\n        } else {\n          let negotiateResponse = null;\n          let redirects = 0;\n          do {\n            negotiateResponse = yield _this4._getNegotiationResponse(url);\n            // the user tries to stop the connection when it is being started\n            if (_this4._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || _this4._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n              throw new AbortError(\"The connection was stopped during negotiation.\");\n            }\n            if (negotiateResponse.error) {\n              throw new Error(negotiateResponse.error);\n            }\n            if (negotiateResponse.ProtocolVersion) {\n              throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n            }\n            if (negotiateResponse.url) {\n              url = negotiateResponse.url;\n            }\n            if (negotiateResponse.accessToken) {\n              // Replace the current access token factory with one that uses\n              // the returned access token\n              const accessToken = negotiateResponse.accessToken;\n              _this4._accessTokenFactory = () => accessToken;\n              // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n              _this4._httpClient._accessToken = accessToken;\n              _this4._httpClient._accessTokenFactory = undefined;\n            }\n            redirects++;\n          } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n          if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n            throw new Error(\"Negotiate redirection limit exceeded.\");\n          }\n          yield _this4._createTransport(url, _this4._options.transport, negotiateResponse, transferFormat);\n        }\n        if (_this4.transport instanceof LongPollingTransport) {\n          _this4.features.inherentKeepAlive = true;\n        }\n        if (_this4._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n          // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n          // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n          _this4._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n          _this4._connectionState = \"Connected\" /* ConnectionState.Connected */;\n        }\n        // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n        // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n        // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n      } catch (e) {\n        _this4._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n        _this4._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n        _this4.transport = undefined;\n        // if start fails, any active calls to stop assume that start will complete the stop promise\n        _this4._stopPromiseResolver();\n        return Promise.reject(e);\n      }\n    })();\n  }\n  _getNegotiationResponse(url) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const negotiateUrl = _this5._resolveNegotiateUrl(url);\n      _this5._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n      try {\n        const response = yield _this5._httpClient.post(negotiateUrl, {\n          content: \"\",\n          headers: {\n            ...headers,\n            ..._this5._options.headers\n          },\n          timeout: _this5._options.timeout,\n          withCredentials: _this5._options.withCredentials\n        });\n        if (response.statusCode !== 200) {\n          return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n        }\n        const negotiateResponse = JSON.parse(response.content);\n        if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n          // Negotiate version 0 doesn't use connectionToken\n          // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n          negotiateResponse.connectionToken = negotiateResponse.connectionId;\n        }\n        if (negotiateResponse.useStatefulReconnect && _this5._options._useStatefulReconnect !== true) {\n          return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\n        }\n        return negotiateResponse;\n      } catch (e) {\n        let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n        if (e instanceof HttpError) {\n          if (e.statusCode === 404) {\n            errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n          }\n        }\n        _this5._logger.log(LogLevel.Error, errorMessage);\n        return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n      }\n    })();\n  }\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n  _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      let connectUrl = _this6._createConnectUrl(url, negotiateResponse.connectionToken);\n      if (_this6._isITransport(requestedTransport)) {\n        _this6._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n        _this6.transport = requestedTransport;\n        yield _this6._startTransport(connectUrl, requestedTransferFormat);\n        _this6.connectionId = negotiateResponse.connectionId;\n        return;\n      }\n      const transportExceptions = [];\n      const transports = negotiateResponse.availableTransports || [];\n      let negotiate = negotiateResponse;\n      for (const endpoint of transports) {\n        const transportOrError = _this6._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\n        if (transportOrError instanceof Error) {\n          // Store the error and continue, we don't want to cause a re-negotiate in these cases\n          transportExceptions.push(`${endpoint.transport} failed:`);\n          transportExceptions.push(transportOrError);\n        } else if (_this6._isITransport(transportOrError)) {\n          _this6.transport = transportOrError;\n          if (!negotiate) {\n            try {\n              negotiate = yield _this6._getNegotiationResponse(url);\n            } catch (ex) {\n              return Promise.reject(ex);\n            }\n            connectUrl = _this6._createConnectUrl(url, negotiate.connectionToken);\n          }\n          try {\n            yield _this6._startTransport(connectUrl, requestedTransferFormat);\n            _this6.connectionId = negotiate.connectionId;\n            return;\n          } catch (ex) {\n            _this6._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n            negotiate = undefined;\n            transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n            if (_this6._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\n              const message = \"Failed to select transport before stop() was called.\";\n              _this6._logger.log(LogLevel.Debug, message);\n              return Promise.reject(new AbortError(message));\n            }\n          }\n        }\n      }\n      if (transportExceptions.length > 0) {\n        return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n      }\n      return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n    })();\n  }\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n        return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._logger, this._options);\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n  _startTransport(url, transferFormat) {\n    var _this7 = this;\n    this.transport.onreceive = this.onreceive;\n    if (this.features.reconnect) {\n      this.transport.onclose = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (e) {\n          let callStop = false;\n          if (_this7.features.reconnect) {\n            try {\n              _this7.features.disconnected();\n              yield _this7.transport.connect(url, transferFormat);\n              yield _this7.features.resend();\n            } catch {\n              callStop = true;\n            }\n          } else {\n            _this7._stopConnection(e);\n            return;\n          }\n          if (callStop) {\n            _this7._stopConnection(e);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    } else {\n      this.transport.onclose = e => this._stopConnection(e);\n    }\n    return this.transport.connect(url, transferFormat);\n  }\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\n    const transport = HttpTransportType[endpoint.transport];\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n            try {\n              this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n    this.transport = undefined;\n    // If we have a stopError, it takes precedence over the error from the transport\n    error = this._stopError || error;\n    this._stopError = undefined;\n    if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n      return;\n    }\n    if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n      this._sendQueue = undefined;\n    }\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n    if (!Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    }\n    // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n    return aTag.href;\n  }\n  _resolveNegotiateUrl(url) {\n    const negotiateUrl = new URL(url);\n    if (negotiateUrl.pathname.endsWith('/')) {\n      negotiateUrl.pathname += \"negotiate\";\n    } else {\n      negotiateUrl.pathname += \"/negotiate\";\n    }\n    const searchParams = new URLSearchParams(negotiateUrl.searchParams);\n    if (!searchParams.has(\"negotiateVersion\")) {\n      searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\n    }\n    if (searchParams.has(\"useStatefulReconnect\")) {\n      if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\n        this._options._useStatefulReconnect = true;\n      }\n    } else if (this._options._useStatefulReconnect === true) {\n      searchParams.append(\"useStatefulReconnect\", \"true\");\n    }\n    negotiateUrl.search = searchParams.toString();\n    return negotiateUrl.toString();\n  }\n}\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n  send(data) {\n    this._bufferData(data);\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n    return this._transportResult.promise;\n  }\n  stop() {\n    this._executing = false;\n    this._sendBufferedData.resolve();\n    return this._sendLoopPromise;\n  }\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n    this._buffer.push(data);\n    this._sendBufferedData.resolve();\n  }\n  _sendLoop() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      while (true) {\n        yield _this8._sendBufferedData.promise;\n        if (!_this8._executing) {\n          if (_this8._transportResult) {\n            _this8._transportResult.reject(\"Connection stopped.\");\n          }\n          break;\n        }\n        _this8._sendBufferedData = new PromiseSource();\n        const transportResult = _this8._transportResult;\n        _this8._transportResult = undefined;\n        const data = typeof _this8._buffer[0] === \"string\" ? _this8._buffer.join(\"\") : TransportSendQueue._concatBuffers(_this8._buffer);\n        _this8._buffer.length = 0;\n        try {\n          yield _this8._transport.send(data);\n          transportResult.resolve();\n        } catch (error) {\n          transportResult.reject(error);\n        }\n      }\n    })();\n  }\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n    return result.buffer;\n  }\n}\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n  resolve() {\n    this._resolver();\n  }\n  reject(reason) {\n    this._rejecter(reason);\n  }\n}","map":{"version":3,"names":["AccessTokenHttpClient","DefaultHttpClient","getEventSource","getWS","AggregateErrors","DisabledTransportError","FailedToNegotiateWithServerError","FailedToStartTransportError","HttpError","UnsupportedTransportError","AbortError","LogLevel","HttpTransportType","TransferFormat","LongPollingTransport","ServerSentEventsTransport","Arg","createLogger","getUserAgentHeader","Platform","WebSocketTransport","MAX_REDIRECTS","HttpConnection","constructor","url","options","_stopPromiseResolver","features","_negotiateVersion","isRequired","_logger","logger","baseUrl","_resolveUrl","logMessageContent","undefined","withCredentials","Error","timeout","webSocketModule","eventSourceModule","isNode","require","WebSocket","EventSource","_httpClient","httpClient","accessTokenFactory","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","Binary","isIn","log","Debug","Promise","reject","_startInternalPromise","_startInternal","message","_stopPromise","send","data","_sendQueue","TransportSendQueue","transport","stop","error","resolve","_stopInternal","_stopError","e","_stopConnection","_accessTokenFactory","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_accessToken","_createTransport","inherentKeepAlive","headers","name","value","negotiateUrl","_resolveNegotiateUrl","response","post","content","statusCode","JSON","parse","negotiateVersion","connectionToken","connectionId","useStatefulReconnect","_useStatefulReconnect","errorMessage","_createConnectUrl","indexOf","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","length","join","ServerSentEvents","LongPolling","reconnect","callStop","disconnected","connect","resend","transportMatches","transferFormats","map","s","Warning","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","toString","get","search","actualTransport","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","byteLength","reduce","a","result","Uint8Array","offset","item","set","buffer","_resolver","_rejecter","reason"],"sources":["C:/Users/Alexco/Desktop/proiect .net/Project/Project/ClientApp/node_modules/@microsoft/signalr/dist/esm/HttpConnection.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { getEventSource, getWS } from \"./DynamicImports\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            webSocketModule = getWS();\r\n            eventSourceModule = getEventSource();\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* ConnectionState.Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    }\r\n                    catch {\r\n                        callStop = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.transport.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const negotiateUrl = new URL(url);\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        }\r\n        else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        }\r\n        else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n        negotiateUrl.search = searchParams.toString();\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}