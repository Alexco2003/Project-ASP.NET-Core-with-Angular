{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Alexco/Desktop/proiect .net/Project/Project/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction ChatComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r1, \"\\n\");\n  }\n}\nexport class ChatComponent {\n  constructor() {\n    this.title = 'ChatAppClient';\n    this.messages = [];\n    this.user = \"\";\n    this.message = \"\";\n    this.connection = new HubConnectionBuilder().withUrl('https://localhost:7048/chat').build();\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.connection.on('ReceiveMessage', (user, message) => {\n        _this.messages.push(`${user}: ${message}`);\n      });\n      try {\n        yield _this.connection.start();\n        console.log('Connected to SignalR hub');\n      } catch (error) {\n        console.error('Failed to connect to SignalR hub', error);\n      }\n    })();\n  }\n  sendMessage() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.user || !_this2.message) return;\n      yield _this2.connection.invoke('SendMessage', _this2.user, _this2.message);\n      _this2.message = '';\n    })();\n  }\n}\nChatComponent.ɵfac = function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)();\n};\nChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"app-chat\"]],\n  decls: 6,\n  vars: 3,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"user\", \"placeholder\", \"User\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"name\", \"message\", \"placeholder\", \"Message\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChatComponent_div_0_Template, 2, 1, \"div\", 0);\n      i0.ɵɵelementStart(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function ChatComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementStart(2, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.user = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.message = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 4);\n      i0.ɵɵtext(5, \"Send\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.user);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", ctx.message);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAAwBA,oBAAoB,QAAQ,oBAAoB;;;;;;ICDxEC,2BAAsC;IACpCA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,4CACF;;;ADMA,OAAM,MAAOC,aAAa;EAOxBC;IANA,UAAK,GAAG,eAAe;IAEhB,aAAQ,GAAa,EAAE;IACvB,SAAI,GAAW,EAAE;IACjB,YAAO,GAAW,EAAE;IAGzB,IAAI,CAACC,UAAU,GAAG,IAAIJ,oBAAoB,EAAE,CACzCK,OAAO,CAAC,6BAA6B,CAAC,CACtCC,KAAK,EAAE;EACZ;EAEMC,QAAQ;IAAA;IAAA;MACZ,KAAI,CAACH,UAAU,CAACI,EAAE,CAAC,gBAAgB,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAI;QACrD,KAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,GAAGH,IAAI,KAAKC,OAAO,EAAE,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAI;QACF,MAAM,KAAI,CAACN,UAAU,CAACS,KAAK,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;OACxC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;;IACzD;EACH;EAEMC,WAAW;IAAA;IAAA;MACf,IAAI,CAAC,MAAI,CAACR,IAAI,IAAI,CAAC,MAAI,CAACC,OAAO,EAAE;MACjC,MAAM,MAAI,CAACN,UAAU,CAACc,MAAM,CAAC,aAAa,EAAE,MAAI,CAACT,IAAI,EAAE,MAAI,CAACC,OAAO,CAAC;MACpE,MAAI,CAACA,OAAO,GAAG,EAAE;IAAC;EACpB;;AA9BWR,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR1BtB,8DAEM;MACNA,+BAAiC;MAA3BA;QAAA,OAAYuB,iBAAa;MAAA,EAAC;MAC9BvB,gCAAqE;MAAlDA;QAAA;MAAA,EAAkB;MAArCA,iBAAqE;MACrEA,gCAA8E;MAA3DA;QAAA;MAAA,EAAqB;MAAxCA,iBAA8E;MAC9EA,iCAAsB;MAAAA,oBAAI;MAAAA,iBAAS;;;MANZA,sCAAW;MAIfA,eAAkB;MAAlBA,kCAAkB;MAClBA,eAAqB;MAArBA,qCAAqB","names":["HubConnectionBuilder","i0","ChatComponent","constructor","connection","withUrl","build","ngOnInit","on","user","message","messages","push","start","console","log","error","sendMessage","invoke","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Alexco\\Desktop\\proiect .net\\Project\\Project\\ClientApp\\src\\app\\chat\\chat.component.ts","C:\\Users\\Alexco\\Desktop\\proiect .net\\Project\\Project\\ClientApp\\src\\app\\chat\\chat.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent {\n  title = 'ChatAppClient';\n  private connection: HubConnection;\n  public messages: string[] = [];\n  public user: string = \"\";\n  public message: string = \"\";\n\n  constructor() {\n    this.connection = new HubConnectionBuilder()\n      .withUrl('https://localhost:7048/chat')\n      .build();\n  }\n\n  async ngOnInit() {\n    this.connection.on('ReceiveMessage', (user, message) => {\n      this.messages.push(`${user}: ${message}`);\n    });\n\n    try {\n      await this.connection.start();\n      console.log('Connected to SignalR hub');\n    } catch (error) {\n      console.error('Failed to connect to SignalR hub', error);\n    }\n  }\n\n  async sendMessage() {\n    if (!this.user || !this.message) return;\n    await this.connection.invoke('SendMessage', this.user, this.message);\n    this.message = '';\n  }\n}\n","<div *ngFor=\"let message of messages\">\n  {{message}}\n</div>\n<form (ngSubmit)=\"sendMessage()\">\n  <input type=\"text\" [(ngModel)]=\"user\" name=\"user\" placeholder=\"User\">\n  <input type=\"text\" [(ngModel)]=\"message\" name=\"message\" placeholder=\"Message\">\n  <button type=\"submit\">Send</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}