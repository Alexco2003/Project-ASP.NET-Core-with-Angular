{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nconst LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  const mapping = LogLevelNameMapping[name.toLowerCase()];\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(`Unknown log level: ${name}`);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\nexport class HubConnectionBuilder {\n  configureLogging(logging) {\n    Arg.isRequired(logging, \"logging\");\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      const logLevel = parseLogLevel(logging);\n      this.logger = new ConsoleLogger(logLevel);\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n    return this;\n  }\n  withUrl(url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    Arg.isNotEmpty(url, \"url\");\n    this.url = url;\n    // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = {\n        ...this.httpConnectionOptions,\n        ...transportTypeOrOptions\n      };\n    } else {\n      this.httpConnectionOptions = {\n        ...this.httpConnectionOptions,\n        transport: transportTypeOrOptions\n      };\n    }\n    return this;\n  }\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n  withHubProtocol(protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  }\n  withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n    return this;\n  }\n  /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withServerTimeout(milliseconds) {\n    Arg.isRequired(milliseconds, \"milliseconds\");\n    this._serverTimeoutInMilliseconds = milliseconds;\n    return this;\n  }\n  /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withKeepAliveInterval(milliseconds) {\n    Arg.isRequired(milliseconds, \"milliseconds\");\n    this._keepAliveIntervalInMilliseconds = milliseconds;\n    return this;\n  }\n  /** Enables and configures options for the Stateful Reconnect feature.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withStatefulReconnect(options) {\n    if (this.httpConnectionOptions === undefined) {\n      this.httpConnectionOptions = {};\n    }\n    this.httpConnectionOptions._useStatefulReconnect = true;\n    this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\n    return this;\n  }\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n  build() {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    const httpConnectionOptions = this.httpConnectionOptions || {};\n    // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    }\n    // Now create the connection\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n    const connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\n  }\n}\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["DefaultReconnectPolicy","HttpConnection","HubConnection","LogLevel","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","LogLevelNameMapping","trace","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","parseLogLevel","name","mapping","toLowerCase","HubConnectionBuilder","configureLogging","logging","isRequired","isLogger","logger","logLevel","withUrl","url","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","transport","withHubProtocol","protocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","reconnectPolicy","Array","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","options","undefined","_useStatefulReconnect","_statefulReconnectBufferSize","bufferSize","build","connection","create","instance","log"],"sources":["C:/Users/Alexco/Desktop/proiect .net/Project/Project/ClientApp/node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withServerTimeout(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withKeepAliveInterval(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withStatefulReconnect(options) {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n        this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}